// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FunctionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Function<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Function<'a> {
  type Inner = Function<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Function<'a> {
  pub const VT_GUID: flatbuffers::VOffsetT = 4;
  pub const VT_SYMBOL: flatbuffers::VOffsetT = 6;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 8;
  pub const VT_CONSTRAINTS: flatbuffers::VOffsetT = 10;
  pub const VT_ENTRY: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Function { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FunctionArgs<'args>
  ) -> flatbuffers::WIPOffset<Function<'bldr>> {
    let mut builder = FunctionBuilder::new(_fbb);
    if let Some(x) = args.entry { builder.add_entry(x); }
    if let Some(x) = args.constraints { builder.add_constraints(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.symbol { builder.add_symbol(x); }
    if let Some(x) = args.guid { builder.add_guid(x); }
    builder.finish()
  }


  #[inline]
  pub fn guid(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Function::VT_GUID, None).unwrap()}
  }
  #[inline]
  pub fn symbol(&self) -> Option<super::symbol_bin::Symbol<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::symbol_bin::Symbol>>(Function::VT_SYMBOL, None)}
  }
  #[inline]
  pub fn type_(&self) -> Option<super::type_bin::Type<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::type_bin::Type>>(Function::VT_TYPE_, None)}
  }
  #[inline]
  pub fn constraints(&self) -> Option<FunctionConstraints<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<FunctionConstraints>>(Function::VT_CONSTRAINTS, None)}
  }
  #[inline]
  pub fn entry(&self) -> Option<BasicBlock<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<BasicBlock>>(Function::VT_ENTRY, None)}
  }
}

impl flatbuffers::Verifiable for Function<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("guid", Self::VT_GUID, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::symbol_bin::Symbol>>("symbol", Self::VT_SYMBOL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::type_bin::Type>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<FunctionConstraints>>("constraints", Self::VT_CONSTRAINTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<BasicBlock>>("entry", Self::VT_ENTRY, false)?
     .finish();
    Ok(())
  }
}
pub struct FunctionArgs<'a> {
    pub guid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub symbol: Option<flatbuffers::WIPOffset<super::symbol_bin::Symbol<'a>>>,
    pub type_: Option<flatbuffers::WIPOffset<super::type_bin::Type<'a>>>,
    pub constraints: Option<flatbuffers::WIPOffset<FunctionConstraints<'a>>>,
    pub entry: Option<flatbuffers::WIPOffset<BasicBlock<'a>>>,
}
impl<'a> Default for FunctionArgs<'a> {
  #[inline]
  fn default() -> Self {
    FunctionArgs {
      guid: None, // required field
      symbol: None,
      type_: None,
      constraints: None,
      entry: None,
    }
  }
}

pub struct FunctionBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FunctionBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_guid(&mut self, guid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Function::VT_GUID, guid);
  }
  #[inline]
  pub fn add_symbol(&mut self, symbol: flatbuffers::WIPOffset<super::symbol_bin::Symbol<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::symbol_bin::Symbol>>(Function::VT_SYMBOL, symbol);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<super::type_bin::Type<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::type_bin::Type>>(Function::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_constraints(&mut self, constraints: flatbuffers::WIPOffset<FunctionConstraints<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<FunctionConstraints>>(Function::VT_CONSTRAINTS, constraints);
  }
  #[inline]
  pub fn add_entry(&mut self, entry: flatbuffers::WIPOffset<BasicBlock<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<BasicBlock>>(Function::VT_ENTRY, entry);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FunctionBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FunctionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Function<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Function::VT_GUID,"guid");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Function<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Function");
      ds.field("guid", &self.guid());
      ds.field("symbol", &self.symbol());
      ds.field("type_", &self.type_());
      ds.field("constraints", &self.constraints());
      ds.field("entry", &self.entry());
      ds.finish()
  }
}
