// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FunctionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Function<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Function<'a> {
  type Inner = Function<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Function<'a> {
  pub const VT_CALLING_CONVENTION: flatbuffers::VOffsetT = 4;
  pub const VT_IN_MEMBERS: flatbuffers::VOffsetT = 6;
  pub const VT_OUT_MEMBERS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Function { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FunctionArgs<'args>
  ) -> flatbuffers::WIPOffset<Function<'bldr>> {
    let mut builder = FunctionBuilder::new(_fbb);
    if let Some(x) = args.out_members { builder.add_out_members(x); }
    if let Some(x) = args.in_members { builder.add_in_members(x); }
    if let Some(x) = args.calling_convention { builder.add_calling_convention(x); }
    builder.finish()
  }


  #[inline]
  pub fn calling_convention(&self) -> Option<CallingConvention<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<CallingConvention>>(Function::VT_CALLING_CONVENTION, None)}
  }
  #[inline]
  pub fn in_members(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FunctionMember<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FunctionMember>>>>(Function::VT_IN_MEMBERS, None)}
  }
  #[inline]
  pub fn out_members(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FunctionMember<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FunctionMember>>>>(Function::VT_OUT_MEMBERS, None)}
  }
}

impl flatbuffers::Verifiable for Function<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<CallingConvention>>("calling_convention", Self::VT_CALLING_CONVENTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<FunctionMember>>>>("in_members", Self::VT_IN_MEMBERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<FunctionMember>>>>("out_members", Self::VT_OUT_MEMBERS, false)?
     .finish();
    Ok(())
  }
}
pub struct FunctionArgs<'a> {
    pub calling_convention: Option<flatbuffers::WIPOffset<CallingConvention<'a>>>,
    pub in_members: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FunctionMember<'a>>>>>,
    pub out_members: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FunctionMember<'a>>>>>,
}
impl<'a> Default for FunctionArgs<'a> {
  #[inline]
  fn default() -> Self {
    FunctionArgs {
      calling_convention: None,
      in_members: None,
      out_members: None,
    }
  }
}

pub struct FunctionBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FunctionBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_calling_convention(&mut self, calling_convention: flatbuffers::WIPOffset<CallingConvention<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<CallingConvention>>(Function::VT_CALLING_CONVENTION, calling_convention);
  }
  #[inline]
  pub fn add_in_members(&mut self, in_members: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<FunctionMember<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Function::VT_IN_MEMBERS, in_members);
  }
  #[inline]
  pub fn add_out_members(&mut self, out_members: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<FunctionMember<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Function::VT_OUT_MEMBERS, out_members);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FunctionBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FunctionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Function<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Function<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Function");
      ds.field("calling_convention", &self.calling_convention());
      ds.field("in_members", &self.in_members());
      ds.field("out_members", &self.out_members());
      ds.finish()
  }
}
