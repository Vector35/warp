// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TypeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Type<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Type<'a> {
  type Inner = Type<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Type<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_CLASS_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_CLASS: flatbuffers::VOffsetT = 8;
  pub const VT_CONFIDENCE: flatbuffers::VOffsetT = 10;
  pub const VT_ALIGNMENT_TYPE: flatbuffers::VOffsetT = 12;
  pub const VT_ALIGNMENT_: flatbuffers::VOffsetT = 14;
  pub const VT_MODIFIERS: flatbuffers::VOffsetT = 16;
  pub const VT_ANCESTORS: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Type { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TypeArgs<'args>
  ) -> flatbuffers::WIPOffset<Type<'bldr>> {
    let mut builder = TypeBuilder::new(_fbb);
    if let Some(x) = args.ancestors { builder.add_ancestors(x); }
    if let Some(x) = args.modifiers { builder.add_modifiers(x); }
    if let Some(x) = args.alignment_ { builder.add_alignment_(x); }
    if let Some(x) = args.class { builder.add_class(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_alignment_type(args.alignment_type);
    builder.add_confidence(args.confidence);
    builder.add_class_type(args.class_type);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Type::VT_NAME, None)}
  }
  #[inline]
  pub fn class_type(&self) -> TypeClass {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TypeClass>(Type::VT_CLASS_TYPE, Some(TypeClass::NONE)).unwrap()}
  }
  #[inline]
  pub fn class(&self) -> flatbuffers::Table<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Type::VT_CLASS, None).unwrap()}
  }
  #[inline]
  pub fn confidence(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(Type::VT_CONFIDENCE, Some(255)).unwrap()}
  }
  #[inline]
  pub fn alignment_type(&self) -> TypeAlignment {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TypeAlignment>(Type::VT_ALIGNMENT_TYPE, Some(TypeAlignment::NONE)).unwrap()}
  }
  #[inline]
  pub fn alignment_(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Type::VT_ALIGNMENT_, None)}
  }
  #[inline]
  pub fn modifiers(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TypeModifier<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TypeModifier>>>>(Type::VT_MODIFIERS, None)}
  }
  #[inline]
  pub fn ancestors(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Type::VT_ANCESTORS, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_void(&self) -> Option<Void<'a>> {
    if self.class_type() == TypeClass::Void {
      let u = self.class();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Void::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_boolean(&self) -> Option<Boolean<'a>> {
    if self.class_type() == TypeClass::Boolean {
      let u = self.class();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Boolean::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_integer(&self) -> Option<Integer<'a>> {
    if self.class_type() == TypeClass::Integer {
      let u = self.class();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Integer::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_character(&self) -> Option<Character<'a>> {
    if self.class_type() == TypeClass::Character {
      let u = self.class();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Character::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_float(&self) -> Option<Float<'a>> {
    if self.class_type() == TypeClass::Float {
      let u = self.class();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Float::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_pointer(&self) -> Option<Pointer<'a>> {
    if self.class_type() == TypeClass::Pointer {
      let u = self.class();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Pointer::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_array(&self) -> Option<Array<'a>> {
    if self.class_type() == TypeClass::Array {
      let u = self.class();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Array::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_structure(&self) -> Option<Structure<'a>> {
    if self.class_type() == TypeClass::Structure {
      let u = self.class();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Structure::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_enumeration(&self) -> Option<Enumeration<'a>> {
    if self.class_type() == TypeClass::Enumeration {
      let u = self.class();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Enumeration::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_union(&self) -> Option<Union<'a>> {
    if self.class_type() == TypeClass::Union {
      let u = self.class();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Union::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_function(&self) -> Option<Function<'a>> {
    if self.class_type() == TypeClass::Function {
      let u = self.class();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Function::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_referrer(&self) -> Option<Referrer<'a>> {
    if self.class_type() == TypeClass::Referrer {
      let u = self.class();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { Referrer::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn alignment__as_access_alignment(&self) -> Option<AccessAlignment<'a>> {
    if self.alignment_type() == TypeAlignment::AccessAlignment {
      self.alignment_().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { AccessAlignment::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn alignment__as_fixed_alignment(&self) -> Option<FixedAlignment<'a>> {
    if self.alignment_type() == TypeAlignment::FixedAlignment {
      self.alignment_().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { FixedAlignment::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for Type<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_union::<TypeClass, _>("class_type", Self::VT_CLASS_TYPE, "class", Self::VT_CLASS, true, |key, v, pos| {
        match key {
          TypeClass::Void => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Void>>("TypeClass::Void", pos),
          TypeClass::Boolean => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Boolean>>("TypeClass::Boolean", pos),
          TypeClass::Integer => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Integer>>("TypeClass::Integer", pos),
          TypeClass::Character => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Character>>("TypeClass::Character", pos),
          TypeClass::Float => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Float>>("TypeClass::Float", pos),
          TypeClass::Pointer => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Pointer>>("TypeClass::Pointer", pos),
          TypeClass::Array => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Array>>("TypeClass::Array", pos),
          TypeClass::Structure => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Structure>>("TypeClass::Structure", pos),
          TypeClass::Enumeration => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Enumeration>>("TypeClass::Enumeration", pos),
          TypeClass::Union => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Union>>("TypeClass::Union", pos),
          TypeClass::Function => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Function>>("TypeClass::Function", pos),
          TypeClass::Referrer => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Referrer>>("TypeClass::Referrer", pos),
          _ => Ok(()),
        }
     })?
     .visit_field::<u8>("confidence", Self::VT_CONFIDENCE, false)?
     .visit_union::<TypeAlignment, _>("alignment_type", Self::VT_ALIGNMENT_TYPE, "alignment_", Self::VT_ALIGNMENT_, false, |key, v, pos| {
        match key {
          TypeAlignment::AccessAlignment => v.verify_union_variant::<flatbuffers::ForwardsUOffset<AccessAlignment>>("TypeAlignment::AccessAlignment", pos),
          TypeAlignment::FixedAlignment => v.verify_union_variant::<flatbuffers::ForwardsUOffset<FixedAlignment>>("TypeAlignment::FixedAlignment", pos),
          _ => Ok(()),
        }
     })?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<TypeModifier>>>>("modifiers", Self::VT_MODIFIERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("ancestors", Self::VT_ANCESTORS, false)?
     .finish();
    Ok(())
  }
}
pub struct TypeArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub class_type: TypeClass,
    pub class: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub confidence: u8,
    pub alignment_type: TypeAlignment,
    pub alignment_: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub modifiers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TypeModifier<'a>>>>>,
    pub ancestors: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for TypeArgs<'a> {
  #[inline]
  fn default() -> Self {
    TypeArgs {
      name: None,
      class_type: TypeClass::NONE,
      class: None, // required field
      confidence: 255,
      alignment_type: TypeAlignment::NONE,
      alignment_: None,
      modifiers: None,
      ancestors: None,
    }
  }
}

pub struct TypeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TypeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Type::VT_NAME, name);
  }
  #[inline]
  pub fn add_class_type(&mut self, class_type: TypeClass) {
    self.fbb_.push_slot::<TypeClass>(Type::VT_CLASS_TYPE, class_type, TypeClass::NONE);
  }
  #[inline]
  pub fn add_class(&mut self, class: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Type::VT_CLASS, class);
  }
  #[inline]
  pub fn add_confidence(&mut self, confidence: u8) {
    self.fbb_.push_slot::<u8>(Type::VT_CONFIDENCE, confidence, 255);
  }
  #[inline]
  pub fn add_alignment_type(&mut self, alignment_type: TypeAlignment) {
    self.fbb_.push_slot::<TypeAlignment>(Type::VT_ALIGNMENT_TYPE, alignment_type, TypeAlignment::NONE);
  }
  #[inline]
  pub fn add_alignment_(&mut self, alignment_: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Type::VT_ALIGNMENT_, alignment_);
  }
  #[inline]
  pub fn add_modifiers(&mut self, modifiers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<TypeModifier<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Type::VT_MODIFIERS, modifiers);
  }
  #[inline]
  pub fn add_ancestors(&mut self, ancestors: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Type::VT_ANCESTORS, ancestors);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TypeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TypeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Type<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Type::VT_CLASS,"class");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Type<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Type");
      ds.field("name", &self.name());
      ds.field("class_type", &self.class_type());
      match self.class_type() {
        TypeClass::Void => {
          if let Some(x) = self.class_as_void() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TypeClass::Boolean => {
          if let Some(x) = self.class_as_boolean() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TypeClass::Integer => {
          if let Some(x) = self.class_as_integer() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TypeClass::Character => {
          if let Some(x) = self.class_as_character() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TypeClass::Float => {
          if let Some(x) = self.class_as_float() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TypeClass::Pointer => {
          if let Some(x) = self.class_as_pointer() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TypeClass::Array => {
          if let Some(x) = self.class_as_array() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TypeClass::Structure => {
          if let Some(x) = self.class_as_structure() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TypeClass::Enumeration => {
          if let Some(x) = self.class_as_enumeration() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TypeClass::Union => {
          if let Some(x) = self.class_as_union() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TypeClass::Function => {
          if let Some(x) = self.class_as_function() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TypeClass::Referrer => {
          if let Some(x) = self.class_as_referrer() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("class", &x)
        },
      };
      ds.field("confidence", &self.confidence());
      ds.field("alignment_type", &self.alignment_type());
      match self.alignment_type() {
        TypeAlignment::AccessAlignment => {
          if let Some(x) = self.alignment__as_access_alignment() {
            ds.field("alignment_", &x)
          } else {
            ds.field("alignment_", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TypeAlignment::FixedAlignment => {
          if let Some(x) = self.alignment__as_fixed_alignment() {
            ds.field("alignment_", &x)
          } else {
            ds.field("alignment_", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("alignment_", &x)
        },
      };
      ds.field("modifiers", &self.modifiers());
      ds.field("ancestors", &self.ancestors());
      ds.finish()
  }
}
