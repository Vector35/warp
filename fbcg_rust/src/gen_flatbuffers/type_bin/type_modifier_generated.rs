// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TypeModifierOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TypeModifier<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TypeModifier<'a> {
  type Inner = TypeModifier<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TypeModifier<'a> {
  pub const VT_CLASS_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_CLASS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TypeModifier { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TypeModifierArgs
  ) -> flatbuffers::WIPOffset<TypeModifier<'bldr>> {
    let mut builder = TypeModifierBuilder::new(_fbb);
    if let Some(x) = args.class { builder.add_class(x); }
    builder.add_class_type(args.class_type);
    builder.finish()
  }


  #[inline]
  pub fn class_type(&self) -> TypeModifierClass {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TypeModifierClass>(TypeModifier::VT_CLASS_TYPE, Some(TypeModifierClass::NONE)).unwrap()}
  }
  #[inline]
  pub fn class(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(TypeModifier::VT_CLASS, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_constant_modifier_class(&self) -> Option<ConstantModifierClass<'a>> {
    if self.class_type() == TypeModifierClass::ConstantModifierClass {
      self.class().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ConstantModifierClass::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_volatile_modifier_class(&self) -> Option<VolatileModifierClass<'a>> {
    if self.class_type() == TypeModifierClass::VolatileModifierClass {
      self.class().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { VolatileModifierClass::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_descriptor_modifier_class(&self) -> Option<DescriptorModifierClass<'a>> {
    if self.class_type() == TypeModifierClass::DescriptorModifierClass {
      self.class().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { DescriptorModifierClass::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn class_as_metadata_modifier_class(&self) -> Option<MetadataModifierClass<'a>> {
    if self.class_type() == TypeModifierClass::MetadataModifierClass {
      self.class().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { MetadataModifierClass::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for TypeModifier<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<TypeModifierClass, _>("class_type", Self::VT_CLASS_TYPE, "class", Self::VT_CLASS, false, |key, v, pos| {
        match key {
          TypeModifierClass::ConstantModifierClass => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ConstantModifierClass>>("TypeModifierClass::ConstantModifierClass", pos),
          TypeModifierClass::VolatileModifierClass => v.verify_union_variant::<flatbuffers::ForwardsUOffset<VolatileModifierClass>>("TypeModifierClass::VolatileModifierClass", pos),
          TypeModifierClass::DescriptorModifierClass => v.verify_union_variant::<flatbuffers::ForwardsUOffset<DescriptorModifierClass>>("TypeModifierClass::DescriptorModifierClass", pos),
          TypeModifierClass::MetadataModifierClass => v.verify_union_variant::<flatbuffers::ForwardsUOffset<MetadataModifierClass>>("TypeModifierClass::MetadataModifierClass", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct TypeModifierArgs {
    pub class_type: TypeModifierClass,
    pub class: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for TypeModifierArgs {
  #[inline]
  fn default() -> Self {
    TypeModifierArgs {
      class_type: TypeModifierClass::NONE,
      class: None,
    }
  }
}

pub struct TypeModifierBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TypeModifierBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_class_type(&mut self, class_type: TypeModifierClass) {
    self.fbb_.push_slot::<TypeModifierClass>(TypeModifier::VT_CLASS_TYPE, class_type, TypeModifierClass::NONE);
  }
  #[inline]
  pub fn add_class(&mut self, class: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TypeModifier::VT_CLASS, class);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TypeModifierBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TypeModifierBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TypeModifier<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TypeModifier<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TypeModifier");
      ds.field("class_type", &self.class_type());
      match self.class_type() {
        TypeModifierClass::ConstantModifierClass => {
          if let Some(x) = self.class_as_constant_modifier_class() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TypeModifierClass::VolatileModifierClass => {
          if let Some(x) = self.class_as_volatile_modifier_class() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TypeModifierClass::DescriptorModifierClass => {
          if let Some(x) = self.class_as_descriptor_modifier_class() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TypeModifierClass::MetadataModifierClass => {
          if let Some(x) = self.class_as_metadata_modifier_class() {
            ds.field("class", &x)
          } else {
            ds.field("class", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("class", &x)
        },
      };
      ds.finish()
  }
}
