include "type.fbs";
include "symbol.fbs";

namespace SigBin;

struct BasicBlockGUID {
    value:[ubyte:16];
}

struct ConstraintGUID {
    value:[ubyte:16];
}

struct FunctionGUID {
    value:[ubyte:16];
}

table BasicBlock {
    guid:BasicBlockGUID (required);
    // TODO: successors:[BasicBlockGUID];
    // TODO: predecessors:[BasicBlockGUID];
}

table Constraint {
    guid:ConstraintGUID (required);
    // The byte offset from the start of the constrained function.
    // A negative number would indicate that the constraint occurs before the start of the function.
    offset:long;
}

table FunctionComment {
    offset:int64;
    text:string (required);
}

// TODO: This is extremely naive, cant handle stack slot re-use.
table FunctionVariable {
    offset:int64;
    name:string;
    location:TypeBin.LocationClass (required);
    type:TypeBin.Type;
    // TODO: Possible value set. (to assert a value)
}

table Function {
    // TODO: Add architecture, this is required to support multi-arch binaries...
    // TODO: Make guid a key when https://github.com/google/flatbuffers/issues/8603 is fixed.
    guid:FunctionGUID (required);
    symbol:SymbolBin.Symbol;
    type:TypeBin.Type;
    constraints:[Constraint];
    comments:[FunctionComment];
    variables:[FunctionVariable];
}

table SignatureChunk {
    functions:[Function] (required);
}

root_type SignatureChunk;