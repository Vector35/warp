// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SignatureChunkOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SignatureChunk<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SignatureChunk<'a> {
  type Inner = SignatureChunk<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SignatureChunk<'a> {
  pub const VT_FUNCTIONS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SignatureChunk { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SignatureChunkArgs<'args>
  ) -> flatbuffers::WIPOffset<SignatureChunk<'bldr>> {
    let mut builder = SignatureChunkBuilder::new(_fbb);
    if let Some(x) = args.functions { builder.add_functions(x); }
    builder.finish()
  }


  #[inline]
  pub fn functions(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Function<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Function>>>>(SignatureChunk::VT_FUNCTIONS, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for SignatureChunk<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Function>>>>("functions", Self::VT_FUNCTIONS, true)?
     .finish();
    Ok(())
  }
}
pub struct SignatureChunkArgs<'a> {
    pub functions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Function<'a>>>>>,
}
impl<'a> Default for SignatureChunkArgs<'a> {
  #[inline]
  fn default() -> Self {
    SignatureChunkArgs {
      functions: None, // required field
    }
  }
}

pub struct SignatureChunkBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SignatureChunkBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_functions(&mut self, functions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Function<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SignatureChunk::VT_FUNCTIONS, functions);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SignatureChunkBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SignatureChunkBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SignatureChunk<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, SignatureChunk::VT_FUNCTIONS,"functions");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SignatureChunk<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SignatureChunk");
      ds.field("functions", &self.functions());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SignatureChunk`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_signature_chunk_unchecked`.
pub fn root_as_signature_chunk(buf: &[u8]) -> Result<SignatureChunk, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SignatureChunk>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SignatureChunk` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_signature_chunk_unchecked`.
pub fn size_prefixed_root_as_signature_chunk(buf: &[u8]) -> Result<SignatureChunk, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SignatureChunk>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SignatureChunk` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_signature_chunk_unchecked`.
pub fn root_as_signature_chunk_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SignatureChunk<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SignatureChunk<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SignatureChunk` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_signature_chunk_unchecked`.
pub fn size_prefixed_root_as_signature_chunk_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SignatureChunk<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SignatureChunk<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SignatureChunk and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SignatureChunk`.
pub unsafe fn root_as_signature_chunk_unchecked(buf: &[u8]) -> SignatureChunk {
  flatbuffers::root_unchecked::<SignatureChunk>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SignatureChunk and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SignatureChunk`.
pub unsafe fn size_prefixed_root_as_signature_chunk_unchecked(buf: &[u8]) -> SignatureChunk {
  flatbuffers::size_prefixed_root_unchecked::<SignatureChunk>(buf)
}
#[inline]
pub fn finish_signature_chunk_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<SignatureChunk<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_signature_chunk_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<SignatureChunk<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
