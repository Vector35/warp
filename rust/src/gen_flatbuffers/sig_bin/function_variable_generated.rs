// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FunctionVariableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FunctionVariable<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FunctionVariable<'a> {
  type Inner = FunctionVariable<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FunctionVariable<'a> {
  pub const VT_OFFSET: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_LOCATION_TYPE: flatbuffers::VOffsetT = 8;
  pub const VT_LOCATION: flatbuffers::VOffsetT = 10;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FunctionVariable { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FunctionVariableArgs<'args>
  ) -> flatbuffers::WIPOffset<FunctionVariable<'bldr>> {
    let mut builder = FunctionVariableBuilder::new(_fbb);
    builder.add_offset(args.offset);
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.location { builder.add_location(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_location_type(args.location_type);
    builder.finish()
  }


  #[inline]
  pub fn offset(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FunctionVariable::VT_OFFSET, Some(0)).unwrap()}
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FunctionVariable::VT_NAME, None)}
  }
  #[inline]
  pub fn location_type(&self) -> super::type_bin::LocationClass {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::type_bin::LocationClass>(FunctionVariable::VT_LOCATION_TYPE, Some(super::type_bin::LocationClass::NONE)).unwrap()}
  }
  #[inline]
  pub fn location(&self) -> flatbuffers::Table<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(FunctionVariable::VT_LOCATION, None).unwrap()}
  }
  #[inline]
  pub fn type_(&self) -> Option<super::type_bin::Type<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::type_bin::Type>>(FunctionVariable::VT_TYPE_, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn location_as_register_location(&self) -> Option<super::type_bin::RegisterLocation<'a>> {
    if self.location_type() == super::type_bin::LocationClass::RegisterLocation {
      let u = self.location();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { super::type_bin::RegisterLocation::init_from_table(u) })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn location_as_stack_location(&self) -> Option<super::type_bin::StackLocation<'a>> {
    if self.location_type() == super::type_bin::LocationClass::StackLocation {
      let u = self.location();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { super::type_bin::StackLocation::init_from_table(u) })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for FunctionVariable<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("offset", Self::VT_OFFSET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_union::<super::type_bin::LocationClass, _>("location_type", Self::VT_LOCATION_TYPE, "location", Self::VT_LOCATION, true, |key, v, pos| {
        match key {
          super::type_bin::LocationClass::RegisterLocation => v.verify_union_variant::<flatbuffers::ForwardsUOffset<super::type_bin::RegisterLocation>>("super::type_bin::LocationClass::RegisterLocation", pos),
          super::type_bin::LocationClass::StackLocation => v.verify_union_variant::<flatbuffers::ForwardsUOffset<super::type_bin::StackLocation>>("super::type_bin::LocationClass::StackLocation", pos),
          _ => Ok(()),
        }
     })?
     .visit_field::<flatbuffers::ForwardsUOffset<super::type_bin::Type>>("type_", Self::VT_TYPE_, false)?
     .finish();
    Ok(())
  }
}
pub struct FunctionVariableArgs<'a> {
    pub offset: i64,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub location_type: super::type_bin::LocationClass,
    pub location: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub type_: Option<flatbuffers::WIPOffset<super::type_bin::Type<'a>>>,
}
impl<'a> Default for FunctionVariableArgs<'a> {
  #[inline]
  fn default() -> Self {
    FunctionVariableArgs {
      offset: 0,
      name: None,
      location_type: super::type_bin::LocationClass::NONE,
      location: None, // required field
      type_: None,
    }
  }
}

pub struct FunctionVariableBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FunctionVariableBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_offset(&mut self, offset: i64) {
    self.fbb_.push_slot::<i64>(FunctionVariable::VT_OFFSET, offset, 0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FunctionVariable::VT_NAME, name);
  }
  #[inline]
  pub fn add_location_type(&mut self, location_type: super::type_bin::LocationClass) {
    self.fbb_.push_slot::<super::type_bin::LocationClass>(FunctionVariable::VT_LOCATION_TYPE, location_type, super::type_bin::LocationClass::NONE);
  }
  #[inline]
  pub fn add_location(&mut self, location: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FunctionVariable::VT_LOCATION, location);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<super::type_bin::Type<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::type_bin::Type>>(FunctionVariable::VT_TYPE_, type_);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FunctionVariableBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FunctionVariableBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FunctionVariable<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, FunctionVariable::VT_LOCATION,"location");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FunctionVariable<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FunctionVariable");
      ds.field("offset", &self.offset());
      ds.field("name", &self.name());
      ds.field("location_type", &self.location_type());
      match self.location_type() {
        super::type_bin::LocationClass::RegisterLocation => {
          if let Some(x) = self.location_as_register_location() {
            ds.field("location", &x)
          } else {
            ds.field("location", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        super::type_bin::LocationClass::StackLocation => {
          if let Some(x) = self.location_as_stack_location() {
            ds.field("location", &x)
          } else {
            ds.field("location", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("location", &x)
        },
      };
      ds.field("type_", &self.type_());
      ds.finish()
  }
}
