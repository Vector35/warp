// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ChunkHeaderOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ChunkHeader<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ChunkHeader<'a> {
  type Inner = ChunkHeader<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ChunkHeader<'a> {
  pub const VT_VERSION: flatbuffers::VOffsetT = 4;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 6;
  pub const VT_COMPRESSION_TYPE: flatbuffers::VOffsetT = 8;
  pub const VT_SIZE: flatbuffers::VOffsetT = 10;
  pub const VT_TARGET: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ChunkHeader { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ChunkHeaderArgs<'args>
  ) -> flatbuffers::WIPOffset<ChunkHeader<'bldr>> {
    let mut builder = ChunkHeaderBuilder::new(_fbb);
    if let Some(x) = args.target { builder.add_target(x); }
    builder.add_size(args.size);
    builder.add_version(args.version);
    builder.add_compression_type(args.compression_type);
    builder.add_type_(args.type_);
    builder.finish()
  }


  #[inline]
  pub fn version(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(ChunkHeader::VT_VERSION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn type_(&self) -> ChunkType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ChunkType>(ChunkHeader::VT_TYPE_, Some(ChunkType::Signatures)).unwrap()}
  }
  #[inline]
  pub fn compression_type(&self) -> CompressionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<CompressionType>(ChunkHeader::VT_COMPRESSION_TYPE, Some(CompressionType::None)).unwrap()}
  }
  #[inline]
  pub fn size(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ChunkHeader::VT_SIZE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn target(&self) -> Option<super::target_bin::Target<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::target_bin::Target>>(ChunkHeader::VT_TARGET, None)}
  }
}

impl flatbuffers::Verifiable for ChunkHeader<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u16>("version", Self::VT_VERSION, false)?
     .visit_field::<ChunkType>("type_", Self::VT_TYPE_, false)?
     .visit_field::<CompressionType>("compression_type", Self::VT_COMPRESSION_TYPE, false)?
     .visit_field::<u32>("size", Self::VT_SIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::target_bin::Target>>("target", Self::VT_TARGET, false)?
     .finish();
    Ok(())
  }
}
pub struct ChunkHeaderArgs<'a> {
    pub version: u16,
    pub type_: ChunkType,
    pub compression_type: CompressionType,
    pub size: u32,
    pub target: Option<flatbuffers::WIPOffset<super::target_bin::Target<'a>>>,
}
impl<'a> Default for ChunkHeaderArgs<'a> {
  #[inline]
  fn default() -> Self {
    ChunkHeaderArgs {
      version: 0,
      type_: ChunkType::Signatures,
      compression_type: CompressionType::None,
      size: 0,
      target: None,
    }
  }
}

pub struct ChunkHeaderBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ChunkHeaderBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_version(&mut self, version: u16) {
    self.fbb_.push_slot::<u16>(ChunkHeader::VT_VERSION, version, 0);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: ChunkType) {
    self.fbb_.push_slot::<ChunkType>(ChunkHeader::VT_TYPE_, type_, ChunkType::Signatures);
  }
  #[inline]
  pub fn add_compression_type(&mut self, compression_type: CompressionType) {
    self.fbb_.push_slot::<CompressionType>(ChunkHeader::VT_COMPRESSION_TYPE, compression_type, CompressionType::None);
  }
  #[inline]
  pub fn add_size(&mut self, size: u32) {
    self.fbb_.push_slot::<u32>(ChunkHeader::VT_SIZE, size, 0);
  }
  #[inline]
  pub fn add_target(&mut self, target: flatbuffers::WIPOffset<super::target_bin::Target<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::target_bin::Target>>(ChunkHeader::VT_TARGET, target);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ChunkHeaderBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ChunkHeaderBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ChunkHeader<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ChunkHeader<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ChunkHeader");
      ds.field("version", &self.version());
      ds.field("type_", &self.type_());
      ds.field("compression_type", &self.compression_type());
      ds.field("size", &self.size());
      ds.field("target", &self.target());
      ds.finish()
  }
}
