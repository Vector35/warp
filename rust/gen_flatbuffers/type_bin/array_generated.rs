// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ArrayOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Array<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Array<'a> {
  type Inner = Array<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Array<'a> {
  pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
  pub const VT_LENGTH: flatbuffers::VOffsetT = 6;
  pub const VT_MODIFIERS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Array { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ArrayArgs<'args>
  ) -> flatbuffers::WIPOffset<Array<'bldr>> {
    let mut builder = ArrayBuilder::new(_fbb);
    builder.add_length(args.length);
    if let Some(x) = args.type_ { builder.add_type_(x); }
    builder.add_modifiers(args.modifiers);
    builder.finish()
  }


  #[inline]
  pub fn type_(&self) -> Type<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Type>>(Array::VT_TYPE_, None).unwrap()}
  }
  #[inline]
  pub fn length(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Array::VT_LENGTH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn modifiers(&self) -> ArrayModifiers {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ArrayModifiers>(Array::VT_MODIFIERS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for Array<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<Type>>("type_", Self::VT_TYPE_, true)?
     .visit_field::<u64>("length", Self::VT_LENGTH, false)?
     .visit_field::<ArrayModifiers>("modifiers", Self::VT_MODIFIERS, false)?
     .finish();
    Ok(())
  }
}
pub struct ArrayArgs<'a> {
    pub type_: Option<flatbuffers::WIPOffset<Type<'a>>>,
    pub length: u64,
    pub modifiers: ArrayModifiers,
}
impl<'a> Default for ArrayArgs<'a> {
  #[inline]
  fn default() -> Self {
    ArrayArgs {
      type_: None, // required field
      length: 0,
      modifiers: Default::default(),
    }
  }
}

pub struct ArrayBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ArrayBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<Type<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Type>>(Array::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_length(&mut self, length: u64) {
    self.fbb_.push_slot::<u64>(Array::VT_LENGTH, length, 0);
  }
  #[inline]
  pub fn add_modifiers(&mut self, modifiers: ArrayModifiers) {
    self.fbb_.push_slot::<ArrayModifiers>(Array::VT_MODIFIERS, modifiers, Default::default());
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ArrayBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ArrayBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Array<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Array::VT_TYPE_,"type_");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Array<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Array");
      ds.field("type_", &self.type_());
      ds.field("length", &self.length());
      ds.field("modifiers", &self.modifiers());
      ds.finish()
  }
}
